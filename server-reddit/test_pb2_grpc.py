# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import test_pb2 as test__pb2


class TestServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestCall = channel.unary_stream(
                '/stream.TestService/TestCall',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )
        self.TestSecondCall = channel.unary_stream(
                '/stream.TestService/TestSecondCall',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )


class TestServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def TestCall(self, request, context):
        """an example of getting a feature
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestSecondCall(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestCall': grpc.unary_stream_rpc_method_handler(
                    servicer.TestCall,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
            'TestSecondCall': grpc.unary_stream_rpc_method_handler(
                    servicer.TestSecondCall,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stream.TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def TestCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stream.TestService/TestCall',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestSecondCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stream.TestService/TestSecondCall',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
